function sorted(xs: Seq[Int]): Bool
{
    |xs| <= 1 ? true : xs[0] <= xs[1] && sorted(xs[1..])
}

method lemma_total_order(xs: Seq[Int], i: Int, j: Int)
    requires sorted(xs)
    requires 0 <= i && i <= j && j < |xs|
    ensures xs[i] <= xs[j]
{
    var v: Int
    v := i + j
    assert v >= 0
    if (i != 0) {
        assert i - 1 + j - 1 < v
        lemma_total_order(xs[1..], i - 1, j - 1)
    } else {
        if (i != j) {
            assert 0 + j - 1 < v
            lemma_total_order(xs[1..], 0, j - 1)
        }
    }
}

function to_multiset(xs: Seq[Int]): Multiset[Int]
{
    |xs| == 0 ? Multiset[Int]() : Multiset(xs[0]) union to_multiset(xs)
}

method insertion_sort(xs: Seq[Int]) returns (ys: Seq[Int])
    ensures sorted(ys)
    ensures |ys| == |xs|
    ensures to_multiset(xs) == to_multiset(ys)
{
    var v: Int 
    v := |xs|
    assert v >= 0
    if (|xs| == 0) {
        ys := Seq[Int]()
    } else {
        ys := insertion_sort(xs[1..])
        ys := insert(xs[0], ys)
    }
}

method insert(x: Int, xs: Seq[Int]) returns (ys: Seq[Int])
    requires sorted(xs)
    ensures sorted(ys)
    ensures |ys| == |xs| + 1
    // ensures |xs| == 0 ==> ys[0] == x 
    // ensures (|xs| > 0 ==> ys[0] == x || ys[0] == xs[0])
    // ensures ys[0] == x || ys[0] == xs[0]  // first element is either x or xs[0]
    // ensures |xs| == 0 ==> ys[0] == x      // but if xs is empty, it must be x
    ensures ys[0] == x || (|xs| > 0 && ys[0] == xs[0])
{
    var v: Int 
    v := |xs|
    assert v >= 0
    if (|xs| == 0) {
        ys := Seq(x)
    } else {
        var y: Int 
        y := xs[0]
        if (x < y) {
           lemma_insert_smallest(x, xs)
            ys := Seq(x) ++ xs
        } else {
            ys := insert(x, xs[1..])
            lemma_insert_smallest(y, ys)
            ys := Seq(y) ++ ys
            
        }
    }
}

method lemma_insert_smallest(x: Int, xs: Seq[Int])
    requires sorted(xs)
    requires |xs| == 0 || (|xs| > 0 && x <= xs[0])
    ensures sorted(Seq(x) ++ xs)
{
    if (|xs| > 0) {
        var ys: Seq[Int] 
        ys := Seq(x) ++ xs
        assert xs == ys[1..]
    }
}