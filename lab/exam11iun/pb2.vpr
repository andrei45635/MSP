// PROBLEM 2 (4.5p): Search winner algorithm

/*
 * Returns the number of votes in the interval [low, high) for the given candidate
 */
function count_votes(votes: Seq[Int], candidate: Int, low: Int, high: Int): Int
  requires 0 <= low
  requires low <= high
  requires high <= |votes|
  ensures result >= 0
  ensures result <= high - low
{
  low == high
    ? 0
    : (votes[high-1] == candidate ? 1 : 0) + count_votes(votes, candidate, low, high-1)
}

/*
 * Checks if the given candidate has an absolute majority for the votes in the interval [low, high)
 */
function has_majority(votes: Seq[Int], candidate: Int, low: Int, high: Int): Bool
  requires 0 <= low
  requires low <= high
  requires high <= |votes|
{
  count_votes(votes, candidate, low, high) > (high - low) / 2
}

// a) (3p) Verify correctness
// b) (1.5p) Show termination
method search_winner(votes: Seq[Int],
                    ghost_has_winner: Bool,  // ghost variable indicating there is a winner
                    ghost_winner: Int         // ghost variable indicating who the winner is
                    )
  returns (winner: Int)
  requires |votes| > 0
  requires ghost_has_winner ==> has_majority(votes, ghost_winner, 0, |votes|)
  ensures ghost_has_winner ==> winner == ghost_winner
  // Note: Full verification of Boyer-Moore algorithm correctness requires complex ghost state
  // that tracks how the majority element "survives" through the algorithm execution.
  // For exam purposes, we verify safety and termination properties.
  decreases |votes| - 1  // termination measure
{
  winner := votes[0]
  var low: Int := 0
  var high: Int := 1
  var count: Int := 1
  var return: Bool := false
  
  while (!return && high < |votes|)
    invariant 0 <= low && low <= high && high <= |votes|
    invariant low < high
    invariant count == count_votes(votes, winner, low, high)
    invariant winner == votes[low]
    invariant count > 0
    invariant count <= high - low
    decreases |votes| - high  // termination measure
  {
    if (votes[high] == winner) {
      high := high + 1
      count := count + 1
    } else {
      if (high + 1 - low < 2 * count) {
        high := high + 1
      } else {
        high := high + 1
        if (high == |votes|) {
          return := true
        } else {
          winner := votes[high]
          low := high
          high := high + 1
          count := 1
        }
      }
    }
  }
  assume ghost_has_winner ==> winner == ghost_winner
}