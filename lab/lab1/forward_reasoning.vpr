/*
    we know that both x and y are positive and that are between 0 and 100
    if z is y - x then the strongest precondition would be:
        ensures z == y - x
    because the checks whether or not z is between 0 and 100 are implied from the y and x 
*/ 
method a(x: Int, y: Int) returns (z: Int)
    requires 0 <= x && x <= y && y < 100
    ensures z == y - x 
    //ensures z >= 0 && z < 100
{
    z := y - x;
}

/*
   we know is x definitely greater than 100 from the assumption
   if we double x then we have x > 200
   The strongest assertion is: 
        assert x > 200
*/
method b()
{
    var x: Int;
    assume 0 <= x && x > 100;
    x := 2 * x;
    assert x > 200;
}

/*
    we know that x is positive and less than y from the assumption
    so if we add 23 to x then x > 23 && x < y + 23
    if we have x0 > 0 (1) and x0 < y0 (2) then we would have y = y0 - 3 * (x0 + 23)
    but since know (2) then we have y > x0 - 3 * (x0 + 23) = x0 - 3 * x0 - 69 = -2 * x0 - 69
    so y > -2 * x0 - 69, but x0 > 0 => y < -69
    so the strongest assertion is : x > 23
 */
method c()
{
    var x: Int;
    var y: Int;

    assume x > 0 && x < y;

    x := x + 23;
    y := y - 3 * x;

    assert x > 23;
    // assert y < -69 && x > 23;
}

/*
    we know that x is positive from the assumption
    after x = x + 1, we also know that x > 1 before the if
    inside the if, if y is true then we init z and do x = x + z
    but, we don't know what kind of value will be assigned to z so 
    we can't say for certain whether or not x will still be positive or not 
    if y is false, then x is simply 42
    so, either y is true or x must 42 
    so, the strongest precondition would be:
        assert y || x == 42
    
 */
method d() 
{
    var x: Int;
    var y: Bool;

    assume x > 0;

    x := x + 1;
    if (y) {
        var z: Int;
        x := x + z;
    } else {
        x := 42;
    }

    assert y || x == 42;
}
