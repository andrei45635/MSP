method square(n: Int) returns (res: Int)
  requires n >= 0
  ensures res == n * n
{
    var i: Int
    var j: Int
    i := 0
    res := 0

    // { i = 0 && res = 0 }
    while (i < n)
        //invariant 0 <= i && i <= n && res == i * n
        invariant 0 <= i && i <= n && res == i * n
    {
        // { i < n && res == i * n }
        j := 0
        
        // { j = 0 && i < n && res == i * n }
        while (j < n)
            // Invariant: 0 <= j && j <= n && res == i * n + j
        {
            // { j < n && res == i * n + j } => res + 1 => i*n + (j+1)
            res := res + 1
            
            // { j < n && res == i*n + (j+1) } => j+1 <= n
            j := j + 1
            // { j <= n && res == i*n + j }
        }
        // Exiting inner loop: j == n => res == i*n + n => res == (i+1)*n

        // { i < n && res == (i+1)*n }
        i := i + 1
        // { i <= n && res == i*n }
    }
    // Exiting outer loop: i == n => res == n*n

    assert res == n * n
}
