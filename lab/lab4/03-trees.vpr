method client() {
    var t: Tree
    t := node(node(leaf(3), leaf(17)), leaf(22))
    
    assert sum(t) == 42
    assert size(t) == 3
}

domain Tree { 

    // constructors
    function leaf(value: Int): Tree
    function node(left: Tree, right: Tree): Tree

    // discriminators (is_node is implicit via !is_leaf(t))
    function is_leaf(t: Tree): Bool 

    // destructors
    function value(t: Tree): Int 
    function left(t: Tree): Tree
    function right(t: Tree): Tree

    function sum(t: Tree): Int
    function size(t: Tree): Int

    // axioms
    axiom def_is_leaf {
        forall x: Int :: is_leaf(leaf(x)) 
    }

    axiom def_not_is_leaf {
        forall l: Tree, r: Tree :: !is_leaf(node(l,r))
    }

    axiom all_variants {
        forall t: Tree ::
            (is_leaf(t) && exists x: Int :: t == leaf(x))
            || (!is_leaf(t) && exists l: Tree, r: Tree :: t == node(l, r))
    }

    axiom value_over_leaf {
        forall x: Int :: value(leaf(x)) == x
    }

    axiom left_over_node {
        forall l: Tree, r: Tree ::
            left(node(l, r)) == l
    }

    axiom right_over_node {
        forall l: Tree, r: Tree ::
            right(node(l, r)) == r
    }

    axiom def_sum {
        forall t: Tree ::
            (is_leaf(t) && sum(t) == value(t))
            || (!is_leaf(t) && sum(t) == sum(left(t)) + sum(right(t)))
    }


    axiom def_size {
        forall t: Tree ::
            (is_leaf(t) && size(t) == 1)
            || (!is_leaf(t) && size(t) == size(left(t)) + size(right(t)))
    }
}
