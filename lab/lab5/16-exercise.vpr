function foo(x: Int): Int
{ 
  x <= 0 ? 1 : foo(x - 2) + 3 
}

method lemma_foo(x: Int)
  ensures x <= 0 ==> foo(x) == 1
  ensures x > 0  ==> foo(x) >= x + 2
  // convenient corollary used in 'client'
  ensures foo(x) >= 1
  decreases x <= 0 ? 0 : x 
{
  if (x <= 0) {
    assert foo(x) == 1;                      
  } else {
    lemma_foo(x - 2);                         // induction

    // unfold one step of 'foo'
    assert foo(x) == foo(x - 2) + 3;

    if (x - 2 <= 0) {                         // small sub-case  (x = 1 or 2)
      assert foo(x - 2) == 1;                 // from lemma
      assert foo(x) == 4;                     // 1 + 3
      assert foo(x) >= x + 2;                 // 4 ≥ 3 or 4 ≥ 4
    } else {                                  // general sub-case (x ≥ 3)
      assert foo(x - 2) >= (x - 2) + 2;       // from lemma
      assert foo(x) >= (x - 2) + 2 + 3;       // add 3
      assert foo(x) >= x + 3;                 // arithmetic
      assert foo(x) >= x + 2;                 // tiny hint for Z3
    }
  }

  // common corollary used later
  assert foo(x) >= 1;
}

method client(r: Int)
{
  var s: Int := foo(r);
  lemma_foo(r);
  var t: Int := foo(s);
  lemma_foo(s);
  assert 2 <= t - s; // should verify
}