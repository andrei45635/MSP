field next: Ref
field elem: Int

predicate list(this: Ref) {
    acc(this.elem) && acc(this.next) && 
    (this.next != null ==> list(this.next))
}

function content(this: Ref): Seq[Int]
    requires list(this)
{
    unfolding list(this) in (this.next == null ? Seq[Int]() : Seq(this.elem) ++ content(this.next))
}

method contains(this: Ref, v: Int) returns (res: Bool)
    requires list(this)
    ensures  list(this)
    ensures  res == (v in content(this))

// ----------------------------------------------------------------------------------------------------------------------

method left(cl: Ref, today: Int) returns (res: Bool)
    requires list(cl)
    ensures  list(cl)
    ensures  res == (today in content(cl))
{
    res := contains(cl, today)
}

method right(sl: Ref, el: Ref, today: Int) returns (res: Bool)
    requires list(sl) && list(el)
    ensures  list(sl) && list(el)
    ensures  res == (today in content(sl) || today in content(el))
{
    res := contains(sl, today)
    var res2: Bool
    res2 := contains(el, today)
    res := res || res2
}


method busy(courses: Ref, seminars: Ref, exams: Ref, today: Int) returns (res: Bool)
    requires list(courses) && list(seminars) && list(exams)
    ensures  list(courses) && list(seminars) && list(exams)
    ensures  res == (today in content(courses) || today in content(seminars) || today in content(exams))
{
    // precondition of left block
    exhale list(courses)
    // precondition of right block
    exhale list(seminars) && list(exams)

    // postcondition of left block
    var leftRes: Bool
    inhale list(courses)
    inhale leftRes == (today in content(courses))

    // postcondition of right block
    var rightRes: Bool
    inhale list(seminars) && list(exams)
    inhale rightRes == (today in content(seminars) || today in content(exams))

    res := leftRes || rightRes
}
