// Flyweight
field val: Int

// Factory
field cache: Ref
field isLock: Bool

// the lock invariant is identical to the former factory predicate
define Inv(this) (
    acc(this.cache) &&
    (this.cache != null ==> acc(this.cache.val, wildcard))
)

define share(this) {
    exhale Inv(this)
    inhale acc(this.isLock, wildcard)
}

define acquire(this) {
    assert acc(this.isLock, wildcard)
    inhale Inv(this)
}

define release(this) {
    exhale Inv(this)
}

method get(this: Ref) returns (f: Ref)
    requires acc(this.isLock, wildcard)
    ensures  acc(f.val, wildcard)
{
    acquire(this)
    if(this.cache == null) {
        f := new(val)
        this.cache := f
    }
    f := this.cache
    release(this)
}